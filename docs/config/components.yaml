# ==============================================================================
# 
#   C O M P O N E N T S     P A G E     C O N F I G U R A T I O N
# 
# ==============================================================================

# --- Anchor Tab ---------------------------------------------------------------
Anchor:
  - class: Anchor

  - title: Appearance
    description:
      - Change <code>Anchor</code> appearance using the following functions <code>as_primary()</code>, <code>as_secondary()</code>, <code>as_success()</code>, <code>as_warning()</code>, <code>as_danger()</code>, <code>as_info()</code>, <code>as_light()</code>, and <code>as_dark()</code>.
    code: |
      @right
      from bootwrap import Panel, Anchor
      panel = Panel(
        Anchor("Primary").link("#").as_primary(),
        Anchor("Secondary").link("#").as_secondary(),
        Anchor("Success").link("#").as_success(),
        Anchor("Warning").link("#").as_warning(),
        Anchor("Danger").link("#").as_danger(),
        Anchor("Info").link("#").as_info(),
        Anchor("Light").link("#").as_light(),
        Anchor("Dark").link("#").as_dark()
      )
      for anchor in panel:
        anchor.mb(1)
      output = panel

  - title: Link Resource
    description: 
      - Associate <code>Anchor</code> with a hyperlink using the <code>link()</code> function.
    code: |
      @right
      from bootwrap import Panel, Anchor
      output = Panel(
          Anchor("Google Search").link("https://www.google.com/")
      )

  - title: Open Dialog
    description: 
      - Use <code>Anchor</code> to open a dialog using the <code>toggle()</code> function.
    code: |
      @right
      from bootwrap import Panel, Dialog, Anchor
      dialog = Dialog(
        "Greeting",
        "Hello World!"
      )
      anchor = Anchor("Say Hello").toggle(dialog)
      output = Panel(dialog, anchor)

  - title: Close Dialog
    description: 
      - Use <code>Anchor</code> to close a dialog using the <code>dismiss()</code> function.
    code: |
      @right
      from bootwrap import Panel, Dialog, Anchor
      dialog = Dialog(
        "Greeting",
        "Hello World!",
        Anchor("Bye").dismiss()
      )
      anchor = Anchor("Say Hello").toggle(dialog)  
      output = Panel(dialog, anchor)

  - title: Expand/Collapse Panel
    description: 
      - Use <code>Anchor</code> to expand/collapse a panel using the <code>toggle()</code> function.
    code: |
      @right
      from bootwrap import Panel, Anchor
      quote = Panel(
        "Sometimes life is going to hit you in " +
        "the head with a brick. Don’t lose faith."
      ).as_collapse()
      output = Panel(
        Anchor("Steve Jobs Quote").toggle(quote),
        quote
      )
    
# --- Badge Tab ----------------------------------------------------------------

Badge:
  - class: Badge

  - title: Appearance
    description:
      - Change <code>Badge</code> appearance using the following functions <code>as_primary()</code>, <code>as_secondary()</code>, <code>as_success()</code>, <code>as_warning()</code>, <code>as_danger()</code>, <code>as_info()</code>, <code>as_light()</code>, and <code>as_dark()</code>.
    code: |
      @right
      from bootwrap import Panel, Badge
      panel = Panel(
        Badge("Primary").as_primary(),
        Badge("Secondary").as_secondary(),
        Badge("Success").as_success(),
        Badge("Warning").as_warning(),
        Badge("Danger").as_danger(),
        Badge("Info").as_info(),
        Badge("Light").as_light(),
        Badge("Dark").as_dark()
      )
      for anchor in panel:
        anchor.mb(1)
      output = panel

# --- Button Tab ---------------------------------------------------------------

Button:
  - class: Button

  - title: Appearance
    description:
      - Change <code>Button</code> appearance using the following functions <code>as_primary()</code>, <code>as_secondary()</code>, <code>as_success()</code>, <code>as_warning()</code>, <code>as_danger()</code>, <code>as_info()</code>, <code>as_light()</code>, and <code>as_dark()</code>.
    code: |
      @right
      from bootwrap import Panel, Button
      panel = Panel(
        Button("Primary").link("#").as_primary(),
        Button("Secondary").link("#").as_secondary(),
        Button("Success").link("#").as_success(),
        Button("Warning").link("#").as_warning(),
        Button("Danger").link("#").as_danger(),
        Button("Info").link("#").as_info(),
        Button("Light").link("#").as_light(),
        Button("Dark").link("#").as_dark()
      )
      for anchor in panel:
        anchor.mb(1)
      output = panel

  - title: Outline
    description:
      - Make <code>Button</code> without filling with surrounded by color border using the following function <code>as primary()</code>.
    code: |
      @right
      from bootwrap import Panel, Button
      panel = Panel(
        Button("Primary").link("#").as_primary().as_outline(),
        Button("Secondary").link("#").as_secondary().as_outline(),
        Button("Success").link("#").as_success().as_outline(),
        Button("Warning").link("#").as_warning().as_outline(),
        Button("Danger").link("#").as_danger().as_outline(),
        Button("Info").link("#").as_info().as_outline(),
        Button("Light").link("#").as_light().as_outline(),
        Button("Dark").link("#").as_dark().as_outline()
      )
      for anchor in panel:
        anchor.mb(1)
      output = panel

  - title: Disable
    description:
      - But default the <code>Button</code> always enabled. Use the <code>as_disabled()</code> function to make the <code>Button</code> disabled. Disable status prevent user to initiate any action assigned to the <code>Button</code>.
    code: |
      @right
      from bootwrap import Panel, Button
      output = Panel(
        Button("Enabled").as_primary(),
        Button("Disabled").as_primary().as_disabled()
      )

  - title: Link Resource
    description: 
      - Associate <code>Button</code> with a hyperlink using the <code>link()</code> function.
    code: |
      @right
      from bootwrap import Panel, Button
      output = Panel(
          Button("Google Search").as_primary().link("https://www.google.com/")
      )

  - title: Open Dialog
    description: 
      - Use <code>Button</code> to open a dialog using the <code>toggle()</code> function.
    code: |
      @right
      from bootwrap import Panel, Dialog, Button
      dialog = Dialog(
        "Greeting",
        "Hello World!"
      )
      button = Button("Say Hello").as_primary().toggle(dialog)
      output = Panel(dialog, button)

  - title: Close Dialog
    description: 
      - Use <code>Button</code> to close a dialog using the <code>dismiss()</code> function.
    code: |
      @right
      from bootwrap import Panel, Dialog, Button
      dialog = Dialog(
        "Greeting",
        "Hello World!",
        Button("Bye").as_primary().dismiss()
      )
      button = Button("Say Hello").as_primary().toggle(dialog)  
      output = Panel(dialog, button)

  - title: Expand/Collapse Panel
    description: 
      - Use <code>Button</code> to expand/collapse a panel using the <code>toggle()</code> function.
    code: |
      @right
      from bootwrap import Panel, Button
      quote = Panel(
        "Sometimes life is going to hit you in " +
        "the head with a brick. Don’t lose faith."
      ).as_collapse()
      output = Panel(
        Button("Steve Jobs Quote").as_primary().toggle(quote),
        quote
      )

  - title: Submit Action
    description: 
      - Use <code>Button</code> to submit form content using the <code>submit()</code> function.
      - <strong>Note:</strong> to make a form submit do not forget to use the <code>Form</code> function <code>on_submit()</code>, which specifies a URL that handles the post request. For more information view the <code>Form</code> documentation.
    code: |
      @right
      from bootwrap import Form, TextInput, Button
      output = Form(
        TextInput("Email", "email", "my@email.com").for_email(),
        Button("Send").as_primary().submit()
      )

# --- Button Group Tab ----------------------------------------------------------

ButtonGroup:
  - class: ButtonGroup

  - title: As check boxes
    description:
      - Group a series of buttons together, which act as check boxes.
    code: |
      @right
      from bootwrap import CheckboxInput, ButtonGroup

      button1 = CheckboxInput('One', 'opt1').as_button().as_secondary()
      button2 = CheckboxInput('Two', 'opt2').as_button().as_secondary()
      button3 = CheckboxInput('Three', 'opt3').as_button().as_secondary()

      output = ButtonGroup(button1, button2, button3)

  - title: As radio buttons
    description:
      - Group a series of buttons together, which act as radio buttons.
    code: |
      @right
      from bootwrap import CheckboxInput, ButtonGroup

      button1 = CheckboxInput('One', 'opt').as_radio(1).as_button().as_secondary()
      button2 = CheckboxInput('Two', 'opt').as_radio(2).as_button().as_secondary()
      button3 = CheckboxInput('Three', 'opt').as_radio(3).as_button().as_secondary()

      output = ButtonGroup(button1, button2, button3)


# --- Deck Tab -----------------------------------------------------------------

Deck:
  - class: Deck
  - class: Deck.Card

# --- Dialog Tab ---------------------------------------------------------------

Dialog:
  - class: Dialog

  - title: Question Dialog
    description:
      - An example of how <code>Dialog</code> can be used for confirming a specific action. Make sure that you provide a correct URL, which <strong>Confirm</strong> <code>Button</code> linked to. You can specify define this URL something like this <code>local/file_system?file_id=1234567&action=delete</code> 
    code: |
      @right
      from bootwrap import Panel, Dialog, Button

      dialog = Dialog(
        "Delete File",
        "Are you sure that you want to delete this file?",
        Button("Confirm").as_danger().dismiss(),
        Button("Cancel").dismiss()
      ).as_danger()

      button = Button("Delete").as_danger().toggle(dialog)   

      output = Panel(dialog, button)

  - title: Complex Dialog
    description:
      - An example of how <code>Dialog</code> can be used for buying shares. It contains a web <code>Form</code> where a user can specify an amount (in Dollars) for buying shares. When the user presses the <strong>Buy</strong> <code>Button</code>, the form will be submitted to the server (at <code>url/to/act</code>). If the user selects <strong>Cancel</strong>, the dialog will be closed, discarding the buying action.
    code: |
      @right
      from bootwrap import Panel, Form, NumericInput, Dialog, Button

      dialog = Dialog(
          "Buy Company Shares",
          Form(
              NumericInput(
                  "Amount($)",
                  "amount",
                  placeholder="enter an amount for buying shares"
              ),
              Button("Cancel").add_classes("float-right").dismiss(),
              Button("Buy").add_classes("float-right").me(2).as_success().
                dismiss()
          )
      )
      button = Button("Buy Shares").as_primary().toggle(dialog)   

      output = Panel(dialog, button) 

Form:
  - class: Form
  - class: CheckboxInput
  - class: TextInput
  - class: NumericInput
  - class: SelectInput
  - class: SelectInput.Option
  - class: HiddenInput
  - class: FileInput
  - class: InputGroup

Icon:
  - class: Icon
  - class: Spinner

Image:
  - class: Image

Javascript:
  - class: Javascript

  - title: jQuery
    description:
      - Use <code>Javascript</code> for creating interactive web content with the help of jQuery.

    code: |
      @right
      from bootwrap import Panel, Javascript, Button, Text

      label = Text("Answer:").as_strong()
      answer = Text("unknown").me(2).ms(2)
      btn_yes = Button("Yes").as_success()
      btn_no = Button("No").as_danger()

      action = Javascript(
        script='''
          $("#btn_yes").on("click",function(){
            $("#answer").text("Yes");
          });
          $("#btn_no").on("click",function(){
            $("#answer").text("No");
          });
        ''',
        submap={
          "answer": answer,
          "btn_yes": btn_yes,
          "btn_no": btn_no
        }
      )
      output = Panel(
        label, answer, btn_yes, btn_no, action
      )

# --- Link Tab -----------------------------------------------------------------

Link:
  - class: Link

# --- List Tab -----------------------------------------------------------------

List:
  - class: List
  - class: List.Item

# --- Navigation Tab -----------------------------------------------------------

Navigation:
  - class: Navigation
  - class: Navigation.Item

# --- Panel Tab ----------------------------------------------------------------

Panel:
  - class: Panel

  - title: Appearance
    description:
      - Change <code>Panel</code> appearance using the following functions <code>as_primary()</code>, <code>as_secondary()</code>, <code>as_success()</code>, <code>as_warning()</code>, <code>as_danger()</code>, <code>as_info()</code>, <code>as_light()</code>, and <code>as_dark()</code>.
    code: |
      @right
      from bootwrap import Panel, Text
      panel = Panel(
        Panel(Text("Primary")).as_primary(),
        Panel(Text("Secondary")).as_secondary(),
        Panel(Text("Success")).as_success(),
        Panel(Text("Warning")).as_warning(),
        Panel(Text("Danger")).as_danger(),
        Panel(Text("Info")).as_info(),
        Panel(Text("Light")).as_light(),
        Panel(Text("Dark").as_light()).as_dark()
      )
      for anchor in panel:
        anchor.mb(1)
      output = panel

  - title: Outline
    description:
      - Make <code>Panel</code> without filling with surrounded by color border using the following function <code>as_outline()</code>.
    code: |
      @right
      from bootwrap import Panel, Text
      panel = Panel(
        Panel(Text("Primary").as_primary()).as_primary().as_outline(),
        Panel(Text("Secondary").as_secondary()).as_secondary().as_outline(),
        Panel(Text("Success").as_success()).as_success().as_outline(),
        Panel(Text("Warning").as_warning()).as_warning().as_outline(),
        Panel(Text("Danger").as_danger()).as_danger().as_outline(),
        Panel(Text("Info").as_info()).as_info().as_outline(),
        Panel(Text("Light").as_light()).as_light().as_outline(),
        Panel(Text("Dark").as_dark()).as_dark().as_outline()
      )
      for anchor in panel:
        anchor.mb(1)
      output = panel

# --- Separator Tab ------------------------------------------------------------

Separator:
  - class: Separator

# --- Table Tab ----------------------------------------------------------------

Table:
  - class: Table
  - class: Table.Head
  - class: Table.Body

# --- Text Tab -----------------------------------------------------------------

Text:
  - class: Text

# --- Toast Tab ---------------------------------------------------------------

Toast:
  - class: Toast

  - title: Default
    description:
      - Make <code>Toast</code> with and without title</code>.
    code: |
      @right
      from bootwrap import Panel, Toast, Button, Icon, Text, Javascript

      tst_with_title = Toast(
          title="Bootwrap",
          description="Hello, world! This is a toast message.",
          marker="11 mins ago",
          figure=Icon("fa-solid fa-info"),
      )
      tst_without_title = Toast(
          description="Hello, world! This is a toast message.",
      )

      btn_show_toast_with_title = Button("Show toast with title")
      btn_show_toast_without_title = Button("Show toast without title")

      action = Javascript(
          script='''
          $("#btn_show_toast_with_title").on("click",function(){
              $("#tst_with_title").toast("show");
          });
          $("#btn_show_toast_without_title").on("click",function(){
              $("#tst_without_title").toast("show");
          });
          ''',
          submap={
              "tst_with_title": tst_with_title,
              "tst_without_title": tst_without_title,
              "btn_show_toast_with_title": btn_show_toast_with_title,
              "btn_show_toast_without_title": btn_show_toast_without_title,
          }
      )

      output = Panel(
          tst_with_title,
          tst_without_title,
          btn_show_toast_with_title,
          btn_show_toast_without_title,
          action
      )

  - title: Appearance
    description:
      - Change <code>Toast</code> appearance using the one of the following functions <code>as_primary()</code>, <code>as_secondary()</code>, <code>as_success()</code>, <code>as_warning()</code>, <code>as_danger()</code>, <code>as_info()</code>, <code>as_light()</code>, and <code>as_dark()</code>.
    code: |
      @right
      from bootwrap import Panel, Toast, Button, Icon, Text, Javascript

      tst_with_title = Toast(
          title="Bootwrap",
          description="Hello, world! This is a toast message.",
          marker="11 mins ago",
          figure=Icon("fa-solid fa-info"),
      ).as_primary()
      tst_without_title = Toast(
          description="Hello, world! This is a toast message.",
      ).as_primary()

      btn_show_toast_with_title = Button("Show toast with title").as_primary()
      btn_show_toast_without_title = Button("Show toast without title").as_primary()

      action = Javascript(
          script='''
          $("#btn_show_toast_with_title").on("click",function(){
              $("#tst_with_title").toast("show");
          });
          $("#btn_show_toast_without_title").on("click",function(){
              $("#tst_without_title").toast("show");
          });
          ''',
          submap={
              "tst_with_title": tst_with_title,
              "tst_without_title": tst_without_title,
              "btn_show_toast_with_title": btn_show_toast_with_title,
              "btn_show_toast_without_title": btn_show_toast_without_title,
          }
      )
      
      output = Panel(
          tst_with_title,
          tst_without_title,
          btn_show_toast_with_title,
          btn_show_toast_without_title,
          action
      )

  - title: Outline
    description:
      - Make <code>Toast</code> without filling with surrounded by color border using the following function <code>as_outline()</code>.
    code: |
      @right
      from bootwrap import Panel, Toast, Button, Icon, Text, Javascript

      tst_with_title = Toast(
          title="Bootwrap",
          description="Hello, world! This is a toast message.",
          marker="11 mins ago",
          figure=Icon("fa-solid fa-info"),
      ).as_success().as_outline()
      tst_without_title = Toast(
          description="Hello, world! This is a toast message.",
      ).as_success().as_outline()

      btn_show_toast_with_title = Button("Show toast with title").as_success().as_outline()
      btn_show_toast_without_title = Button("Show toast without title").as_success().as_outline()

      action = Javascript(
          script='''
          $("#btn_show_toast_with_title").on("click",function(){
              $("#tst_with_title").toast("show");
          });
          $("#btn_show_toast_without_title").on("click",function(){
              $("#tst_without_title").toast("show");
          });
          ''',
          submap={
              "tst_with_title": tst_with_title,
              "tst_without_title": tst_without_title,
              "btn_show_toast_with_title": btn_show_toast_with_title,
              "btn_show_toast_without_title": btn_show_toast_without_title,
          }
      )
      
      output = Panel(
          tst_with_title,
          tst_without_title,
          btn_show_toast_with_title,
          btn_show_toast_without_title,
          action
      )

  - title: Delay
    description:
      - Make <code>Toast</code> with custom delay.
    code: |
      @right
      from bootwrap import Panel, Toast, Button, Icon, Text, Javascript

      tst_example = Toast(
          title="Bootwrap",
          description="Hello, world! This is a toast message will hide in 5 sec.",
          marker="11 mins ago",
          figure=Icon("fa-solid fa-info"),
          hide_delay=5000
      )
      btn_show_toast = Button("Show toast")

      action = Javascript(
          script='''
          $("#btn_show_toast").on("click",function(){
              $("#tst_example").toast("show");
          });
          ''',
          submap={
              "tst_example": tst_example,
              "btn_show_toast": btn_show_toast,
          }
      )

      output = Panel(
          tst_example,
          btn_show_toast,
          action
      )